---
- name: Provision GCP resources and configure SQL database
  hosts: localhost
  become: true 
  vars:
    sql_user: webserver-cloud-computing
    sql_databasename: picturesDB
    sql_tablename: pictures
    sql_ip: 104.197.65.50
    sql_password: postgresPasswordCloudComputing

  tasks:
    - name: Install Python
      apt:
        name: python3
        state: present

    - name: Install pip for Python 3
      apt:
        name: python3-pip
        state: present

    - name: Install psycopg2 package
      apt:
        name:  python3-psycopg2

    - name: Create picturesDB database
      community.postgresql.postgresql_db:
        name: "{{sql_databasename}}"
        state: present
        login_user: "{{sql_user}}"
        login_password: "{{sql_password}}"
        login_host: "{{sql_ip}}"

    - name: Create pictures table
      community.postgresql.postgresql_table:
        db: "{{sql_databasename}}"
        table: "{{sql_tablename}}"
        columns:
        - description VARCHAR(255) primary key
        - picture text
        login_user: "{{sql_user}}"
        login_password: "{{sql_password}}"
        login_host: "{{sql_ip}}"


- name: Provision GCP VM and install Docker
  hosts: remote-hosts
  become: true 

  vars:
    default_container_name: ccp_webserver
    default_container_image: michi321321/ccp_webserver
    arch_mapping:  
      x86_64: amd64
      aarch64: arm64
  
  
  tasks:
    - name: Update and upgrade all packages to the latest version
      ansible.builtin.apt:
        update_cache: true
        upgrade: dist
        cache_valid_time: 3600

    - name: Install required packages
      ansible.builtin.apt:
        pkg:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - software-properties-common

    - name: Create directory for Docker's GPG key
      ansible.builtin.file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Add Docker's official GPG key
      ansible.builtin.apt_key:
        url: https://download.docker.com/linux/debian/gpg
        keyring: /etc/apt/keyrings/docker.gpg
        state: present

    - name: Print architecture variables
      ansible.builtin.debug:
        msg: "Architecture: {{ ansible_architecture }}, Codename: {{ ansible_lsb.codename }}"

    - name: Add Docker repository
      ansible.builtin.apt_repository:
        repo: >-
          deb [arch={{ arch_mapping[ansible_architecture] | default(ansible_architecture) }}
          signed-by=/etc/apt/keyrings/docker.gpg]
          https://download.docker.com/linux/debian {{ ansible_lsb.codename }} stable
        filename: docker
        state: present

    - name: Install Docker and related packages
      ansible.builtin.apt:
        name: "{{ item }}"
        state: present
        update_cache: true
      loop:
        - docker-ce
        - docker-ce-cli
        - containerd.io
        - docker-buildx-plugin
        - docker-compose-plugin

    - name: Add Docker group
      ansible.builtin.group:
        name: docker
        state: present

    - name: Enable and start Docker services
      ansible.builtin.systemd:
        name: "{{ item }}"
        enabled: true
        state: started
      loop:
        - docker.service
        - containerd.service

    - name: Add user to Docker group
      ansible.builtin.user:
        name: "{{ ansible_user }}"
        groups: docker
        append: true

    - name: Copy env file to server 
      ansible.builtin.copy:
        src: /home/r_grote72/.env
        dest: /home/r_grote72/.env
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"

    - name: Start Docker container
      community.docker.docker_container:
        name: "webserver"
        env_file: /home/r_grote72/.env
        state: started
        image: "{{ default_container_image }}"
        pull: true 
        restart_policy: always
        ports:
          - "80:80"
    
   
